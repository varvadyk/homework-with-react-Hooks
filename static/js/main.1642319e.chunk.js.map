{"version":3,"sources":["components/Timer/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","time","autostart","step","onTick","onTimeStart","onTimePause","onTimeEnd","useState","count","setCount","activeTimer","setActive","ChangeActive","useEffect","id","window","setInterval","clearInterval","className","onClick","App","console","log","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qQA+CeA,EA3CH,SAAC,GAAkE,IAAjEC,EAAgE,EAAhEA,KAAKC,EAA2D,EAA3DA,UAAUC,EAAiD,EAAjDA,KAAKC,EAA4C,EAA5CA,OAAOC,EAAqC,EAArCA,YAAYC,EAAyB,EAAzBA,YAAYC,EAAa,EAAbA,UAAa,EAEtDC,mBAASP,GAF6C,mBAEtEQ,EAFsE,KAEhEC,EAFgE,OAGhDF,oBAAS,GAHuC,mBAGvEG,EAHuE,KAG3DC,EAH2D,KAK9E,SAASC,IACLD,GAAWD,GACXA,EAAcL,IAAcD,IAqBhC,OAjBAS,qBAAU,WAEN,GAAGH,GAAcT,EAAU,CAE3B,IAAMa,EAAGC,OAAOC,aAAY,WACxBP,GAAU,SAAAD,GAAK,OAAEA,EAAM,KACvBL,EAAOK,KACLN,GAMN,OALe,IAARM,IACCF,IACAM,KAGD,kBAAIG,OAAOE,cAAcH,OAGlC,CAACJ,EAAaT,EAAWC,EAAMC,EAAQK,EAAOJ,EAAaE,EAAWM,IAEpE,yBAAKM,UAAU,mBACX,yBAAKA,UAAU,SAASV,GACtBE,EAEF,4BAAQQ,UAAU,eAAeC,QAAS,kBAAMP,MAAoB,8BAAM,kBAAC,IAAD,QAItE,4BAAQM,UAAU,eAAeC,QAAS,kBAAMP,MAAqB,8BAAM,kBAAC,IAAD,U,MCtBxEQ,MAhBf,WACE,OACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,CACFlB,KAAM,GACNC,WAAW,EACXC,KAAM,IACNC,OAAQ,SAACH,GAAD,OAAUqB,QAAQC,IAAI,gGAAuBtB,IACrDI,YAAa,kBAAMiB,QAAQC,IAAI,qFAC/BjB,YAAa,kBAAMgB,QAAQC,IAAI,sFAC/BhB,UAAW,kBAAMe,QAAQC,IAAI,uECDbC,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.1642319e.chunk.js","sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport './Timer.css';\r\nimport {TiMediaPlay}from \"react-icons/ti\";\r\nimport {TiMediaPause}from \"react-icons/ti\";\r\nconst Timer=({time,autostart,step,onTick,onTimeStart,onTimePause,onTimeEnd})=>{\r\n   \r\nconst [ count,setCount]=useState(time);\r\nconst [activeTimer,setActive]=useState(false);\r\n\r\nfunction ChangeActive(){\r\n    setActive(!activeTimer)\r\n    activeTimer ? onTimePause():onTimeStart();\r\n\r\n}\r\n\r\nuseEffect(()=>{\r\n    \r\n    if(activeTimer ||autostart){\r\n       \r\n    const id=window.setInterval(()=>{\r\n        setCount( count=>count-1);\r\n        onTick(count);\r\n        },step);\r\n        if(count===0){\r\n            onTimeEnd();\r\n            ChangeActive()\r\n           \r\n        }\r\n    return ()=>window.clearInterval(id);\r\n}\r\nreturn undefined;\r\n},[activeTimer, autostart, step, onTick, count, onTimeStart, onTimeEnd, ChangeActive]);\r\nreturn(\r\n    <div className=\"buttons_content\">\r\n        <div className=\"timer\">{count}</div>\r\n        { activeTimer\r\n        ? (\r\n        <button className=\"button_start\" onClick={() => ChangeActive(true)}><span><TiMediaPause /></span></button>\r\n        )\r\n        :(\r\n            \r\n            <button className=\"button_start\" onClick={() => ChangeActive(false)}><span><TiMediaPlay /></span></button>\r\n        )\r\n        }  \r\n    </div>\r\n);\r\n};\r\nexport default Timer;\r\n","import React from 'react';\nimport Timer  from './components/Timer/Timer';\nimport './App.css';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer \n    time={10}\n    autostart={false}\n    step={1000}\n    onTick={(time) => console.log(\"Осталось времени: \" + time)} \n    onTimeStart={() => console.log(\"Таймер запущен!\")}\n    onTimePause={() => console.log(\"Таймер на паузе!\")}\n    onTimeEnd={() => console.log(\"Время вышло!\")} \n    />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}